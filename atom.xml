<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chen&#39;s blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-25T11:45:43.378Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Little Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python变量间的相互引用与赋值</title>
    <link href="http://yoursite.com/2020/04/25/python%E5%8F%98%E9%87%8F%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E5%BC%95%E7%94%A8%E4%B8%8E%E8%B5%8B%E5%80%BC/"/>
    <id>http://yoursite.com/2020/04/25/python%E5%8F%98%E9%87%8F%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E5%BC%95%E7%94%A8%E4%B8%8E%E8%B5%8B%E5%80%BC/</id>
    <published>2020-04-25T11:28:03.834Z</published>
    <updated>2020-04-25T11:45:43.378Z</updated>
    
    <content type="html"><![CDATA[<hr><p>看一段代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直接引用</span></span><br><span class="line">a= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b=a</span><br><span class="line">print(<span class="string">"变量a所在内存地址为:"</span>+str(id(a))+<span class="string">"-值为:"</span>+str(a))</span><br><span class="line">print(<span class="string">"变量b所在内存地址为:"</span>+str(id(b))+<span class="string">"-值为:"</span>+str(b))</span><br></pre></td></tr></table></figure><p>运行一下。结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量a所在内存地址为:3029425873544-值为:[1, 2, 3]</span><br><span class="line">变量b所在内存地址为:3029425873544-值为:[1, 2, 3]</span><br></pre></td></tr></table></figure><p>可以发现a与b的地址和值都相同，说明b只是a的一个引用。现在我们把a的值改成[4,5,6];再打印：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直接引用</span></span><br><span class="line">a= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b=a</span><br><span class="line">print(<span class="string">"变量a所在内存地址为:"</span>+str(id(a))+<span class="string">"-值为:"</span>+str(a))</span><br><span class="line">print(<span class="string">"变量b所在内存地址为:"</span>+str(id(b))+<span class="string">"-值为:"</span>+str(b))</span><br><span class="line">a=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">print(<span class="string">"变量a所在内存地址为:"</span>+str(id(a))+<span class="string">"-值为:"</span>+str(a))</span><br><span class="line">print(<span class="string">"变量b所在内存地址为:"</span>+str(id(b))+<span class="string">"-值为:"</span>+str(b))</span><br></pre></td></tr></table></figure><p>运行一下。结果为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">变量a所在内存地址为:<span class="number">2021308457608</span>-值为:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">变量b所在内存地址为:<span class="number">2021308457608</span>-值为:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">变量a所在内存地址为:<span class="number">2021308457672</span>-值为:[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">变量b所在内存地址为:<span class="number">2021308457608</span>-值为:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>变量a指向了新的地址和值，而变量b还是指向原来的。</p><p>现在，我们改用索引的方式对a进行重新赋值，再打印:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直接引用</span></span><br><span class="line">a= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b=a</span><br><span class="line">print(<span class="string">"变量a所在内存地址为:"</span>+str(id(a))+<span class="string">"-值为:"</span>+str(a))</span><br><span class="line">print(<span class="string">"变量b所在内存地址为:"</span>+str(id(b))+<span class="string">"-值为:"</span>+str(b))</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">4</span></span><br><span class="line">a[<span class="number">1</span>]=<span class="number">5</span></span><br><span class="line">a[<span class="number">2</span>]=<span class="number">6</span></span><br><span class="line">print(<span class="string">"变量a所在内存地址为:"</span>+str(id(a))+<span class="string">"-值为:"</span>+str(a))</span><br><span class="line">print(<span class="string">"变量b所在内存地址为:"</span>+str(id(b))+<span class="string">"-值为:"</span>+str(b))</span><br></pre></td></tr></table></figure><p>运行一下。结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">变量a所在内存地址为:<span class="number">1457487569544</span>-值为:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">变量b所在内存地址为:<span class="number">1457487569544</span>-值为:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">变量a所在内存地址为:<span class="number">1457487569544</span>-值为:[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">变量b所在内存地址为:<span class="number">1457487569544</span>-值为:[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>发现两个变量依旧指向原来的内存区域,但是值都更新为了[4,5,6]。这也是为什么有时候变量会无故变混乱的原因。</p><hr> <center>٩( 'ω' )و get！</center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;看一段代码:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python中arg，args,kwargs的用法</title>
    <link href="http://yoursite.com/2020/04/24/Python%E4%B8%ADarg%EF%BC%8Cargs,kwargs%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2020/04/24/Python%E4%B8%ADarg%EF%BC%8Cargs,kwargs%E7%9A%84%E7%94%A8%E6%B3%95/</id>
    <published>2020-04-24T13:18:05.065Z</published>
    <updated>2020-04-24T13:50:45.533Z</updated>
    
    <content type="html"><![CDATA[<hr><p>定义一个main函数，形参为arg，打印arg。调用main函数，传入实参1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(arg)</span>:</span></span><br><span class="line">    print(arg)</span><br><span class="line">main(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>运行一下。呦呵，输出了：<code>1</code>。</p><p>此时，如果我想传入多个形参，但又不确定有几个，该咋办呢？:happy:哈哈，<code>*args</code>就可以实现。在函数头添加形参<code>*args</code>,打印args，传入几个实参2。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(arg,*args)</span>:</span></span><br><span class="line">    print(arg)</span><br><span class="line">    print(args)</span><br><span class="line">main(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>运行一下。结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>多输出了一个元组。</p><p>然后，再添加一个形参<code>**kwargs</code>，打印kwargs。传入实参Student=”学生”,Teacher=”老师”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(arg,*args,**kwargs)</span>:</span></span><br><span class="line">    print(arg)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line">main(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,Student=<span class="string">"学生"</span>,Teacher=<span class="string">"老师"</span>)</span><br></pre></td></tr></table></figure><p>运行一下。结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">&#123;<span class="string">'Student'</span>: <span class="string">'学生'</span>, <span class="string">'Teacher'</span>: <span class="string">'老师'</span>&#125;</span><br></pre></td></tr></table></figure><p>多输出了一个字典。</p><p>加上type()查看一下输出变量类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(arg,*args,**kwargs)</span>:</span></span><br><span class="line">    print(type(arg))</span><br><span class="line">    print(type(args))</span><br><span class="line">    print(type(kwargs))</span><br><span class="line">main(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,Student=<span class="string">"学生"</span>,Teacher=<span class="string">"老师"</span>)</span><br></pre></td></tr></table></figure><p>运行一下。结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">dict</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>呦呵，python可真智能。</p><p><strong>所以<code>*args</code>可以实现传入多个，但又不确定 几个的形参定义。实参传入后python将其组织成元组(tuple)。`\</strong>kwargs`可以实现传入多个，但又不确定几个的键值对定义。实参传入后python将其组织成字典(dict)。**</p><hr> <center>٩( 'ω' )و get！</center><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"enable":true,"clientID":"8de4640ced2f028d2ddb","clientSecret":"568544c87515451755cba417e1492cc3fdc8cf6f","repo":"savaGitalk","owner":"printffhelloworld","admin":"printffhelloworld","distractionFreeMode":true};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;定义一个main函数，形参为arg，打印arg。调用main函数，传入实参1。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>公告1</title>
    <link href="http://yoursite.com/2020/04/23/%E5%85%AC%E5%91%8A/"/>
    <id>http://yoursite.com/2020/04/23/%E5%85%AC%E5%91%8A/</id>
    <published>2020-04-23T14:47:15.000Z</published>
    <updated>2020-04-24T14:13:38.104Z</updated>
    
    <content type="html"><![CDATA[<hr><p>今日停更一天。头像为公众号，刚注册目前还在审核中。</p><hr> <center>٩( 'ω' )و get！</center><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"enable":true,"clientID":"8de4640ced2f028d2ddb","clientSecret":"568544c87515451755cba417e1492cc3fdc8cf6f","repo":"savaGitalk","owner":"printffhelloworld","admin":"printffhelloworld","distractionFreeMode":true};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;今日停更一天。头像为公众号，刚注册目前还在审核中。&lt;/p&gt;
&lt;hr&gt;
 &lt;center&gt;٩( &#39;ω&#39; )و get！&lt;/center&gt;


&lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;https://cdn.boo
      
    
    </summary>
    
    
      <category term="拖更" scheme="http://yoursite.com/categories/%E6%8B%96%E6%9B%B4/"/>
    
      <category term="公告" scheme="http://yoursite.com/categories/%E6%8B%96%E6%9B%B4/%E5%85%AC%E5%91%8A/"/>
    
    
      <category term="公告" scheme="http://yoursite.com/tags/%E5%85%AC%E5%91%8A/"/>
    
      <category term="拖更" scheme="http://yoursite.com/tags/%E6%8B%96%E6%9B%B4/"/>
    
  </entry>
  
  <entry>
    <title>匿名函数lambda的用法</title>
    <link href="http://yoursite.com/2020/04/22/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0lambda%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2020/04/22/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0lambda%E7%9A%84%E7%94%A8%E6%B3%95/</id>
    <published>2020-04-22T13:04:35.575Z</published>
    <updated>2020-04-22T13:41:37.470Z</updated>
    
    <content type="html"><![CDATA[<hr><p>lambda是python中的保留关键字，可以通过一行代码定义匿名函数。基本结构是：<code>lambda argument_list:expression</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="keyword">lambda</span> x: x ** <span class="number">2</span>  <span class="comment"># 创建一个变量a=lambda 参数为x 表达式为x的2次方</span></span><br><span class="line">print(a(<span class="number">2</span>))           <span class="comment"># 给a函数传入实参2</span></span><br></pre></td></tr></table></figure><p>运行一下。呦呵，输出了:<code>4。</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个变量b=lambda 参数为x和y 表达式为如果x大于y结果为x，否则为y</span></span><br><span class="line">b = <span class="keyword">lambda</span> x, y: x <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> y</span><br><span class="line"><span class="comment"># 给b函数传入实参1和2</span></span><br><span class="line">print(b(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>运行一下。呦呵，输出了较大的:<code>2</code>。</p><p>此外，lambda还可以放入有序列表中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个有序列表a_list赋给它两个lambda匿名函数，一个用于去除多余空格，一个用于乘方运算</span></span><br><span class="line">a_list = [<span class="keyword">lambda</span> x: x.strip(), <span class="keyword">lambda</span> x: x ** <span class="number">2</span>]</span><br><span class="line">print(a_list)</span><br></pre></td></tr></table></figure><p>运行一下。输出了：<code>[&lt;function &lt;lambda&gt; at 0x000001D98E38FE18&gt;, &lt;function &lt;lambda&gt; at 0x000001D98E38FEA0&gt;]</code>。可见两个元素都是lambda匿名函数。</p><p>调用这两个函数只需要按照索引传入实参即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个有序列表a_list赋给它两个lambda匿名函数，一个用于去除多余空格，一个用于乘方运算</span></span><br><span class="line">a_list = [<span class="keyword">lambda</span> x: x.strip(), <span class="keyword">lambda</span> x: x ** <span class="number">2</span>]</span><br><span class="line">print(a_list)</span><br><span class="line"><span class="comment">#给第一个函数传入实参giao空格空格空格空格</span></span><br><span class="line">print(a_list[<span class="number">0</span>](<span class="string">"giao     "</span>))</span><br><span class="line"><span class="comment">#给第二个函数传入实参3</span></span><br><span class="line">print(a_list[<span class="number">1</span>](<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>运行一下。正确输出了结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x00000261D659FEA0</span>&gt;, &lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x00000261D659FF28</span>&gt;]</span><br><span class="line">giao</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>最后，lambda还可以作为函数返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个main函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 返回由lambda定义的乘方函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x ** <span class="number">2</span></span><br><span class="line"><span class="comment">#打印main函数的返回值</span></span><br><span class="line">print(main())</span><br></pre></td></tr></table></figure><p>运行一下。结果返回一个函数指针:<code>&lt;function main.&lt;locals&gt;.&lt;lambda&gt; at 0x0000020D3B0A5048&gt;</code>。给这个指针传入实参4。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个main函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 返回由lambda定义的乘方函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x ** <span class="number">2</span></span><br><span class="line">print(main())</span><br><span class="line">print(main()(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>运行一下。哈哈，输出了:<code>16</code>。</p><hr> <center>٩( 'ω' )و get！</center><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"enable":true,"clientID":"8de4640ced2f028d2ddb","clientSecret":"568544c87515451755cba417e1492cc3fdc8cf6f","repo":"savaGitalk","owner":"printffhelloworld","admin":"printffhelloworld","distractionFreeMode":true};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;lambda是python中的保留关键字，可以通过一行代码定义匿名函数。基本结构是：&lt;code&gt;lambda argument_list:expression&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>如何在list顺序不变的条件下执行去重操作</title>
    <link href="http://yoursite.com/2020/04/21/%E5%A6%82%E4%BD%95%E5%9C%A8list%E9%A1%BA%E5%BA%8F%E4%B8%8D%E5%8F%98%E7%9A%84%E6%9D%A1%E4%BB%B6%E4%B8%8B%E6%89%A7%E8%A1%8C%E5%8E%BB%E9%87%8D%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2020/04/21/%E5%A6%82%E4%BD%95%E5%9C%A8list%E9%A1%BA%E5%BA%8F%E4%B8%8D%E5%8F%98%E7%9A%84%E6%9D%A1%E4%BB%B6%E4%B8%8B%E6%89%A7%E8%A1%8C%E5%8E%BB%E9%87%8D%E6%93%8D%E4%BD%9C/</id>
    <published>2020-04-21T13:50:12.075Z</published>
    <updated>2020-04-21T14:46:00.659Z</updated>
    
    <content type="html"><![CDATA[<hr><p>初始化一个list，并赋给它一些重复的值。把列表转换成set类型，再转换成list,完成去重操作。打印结果 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line">a1 = list(set(a))</span><br><span class="line">print(a1)</span><br></pre></td></tr></table></figure><p>运行一下。呦呵，输出了：<code>[&#39;b&#39;, &#39;c&#39;, &#39;a&#39;, &#39;d&#39;]</code>。再运行一下。啊哈，输出了：<code>[&#39;b&#39;, &#39;a&#39;, &#39;d&#39;, &#39;c&#39;]</code>。再运行一下。我去，又输出了：<code>[&#39;d&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>。</p><p>这是由于set是无序列表而造成的。所以每次输出的顺序都是不同的。</p><p>那么如何才能保证既去重又保持原有顺序呢？</p><p>只需将去重后的有序列表按原列表索引排序即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line">a1 = list(set(a))</span><br><span class="line"><span class="comment"># print(a1)</span></span><br><span class="line">a1.sort(key=a.index)</span><br><span class="line">print(a1)</span><br></pre></td></tr></table></figure><p>运行一下。呦呵，输出了：<code>[&#39;a&#39;, &#39;b&#39;, &#39;d&#39;, &#39;c&#39;]</code>。在运行一下。呦呵，还是：<code>[&#39;a&#39;, &#39;b&#39;, &#39;d&#39;, &#39;c&#39;]</code>。舒服了</p><p>因为在原有列表(list)中，个元素的index值是固定值，即使转换成无序列表(set)后，各元素在原有序列表中的索引值也不会改变。因此可以使用index作为去重操作后的排序依据。</p><hr> <center>٩( 'ω' )و get！</center><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"enable":true,"clientID":"8de4640ced2f028d2ddb","clientSecret":"568544c87515451755cba417e1492cc3fdc8cf6f","repo":"savaGitalk","owner":"printffhelloworld","admin":"printffhelloworld","distractionFreeMode":true};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;初始化一个list，并赋给它一些重复的值。把列表转换成set类型，再转换成list,完成去重操作。打印结果 。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python3中if __name__ == &#39;__main__&#39;到底是个啥玩意</title>
    <link href="http://yoursite.com/2020/04/20/Python3%E4%B8%ADif%20__name__%20==%20&#39;__main__&#39;%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5%E7%8E%A9%E6%84%8F/"/>
    <id>http://yoursite.com/2020/04/20/Python3%E4%B8%ADif%20__name__%20==%20&#39;__main__&#39;%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5%E7%8E%A9%E6%84%8F/</id>
    <published>2020-04-20T13:07:45.042Z</published>
    <updated>2020-04-20T15:10:32.918Z</updated>
    
    <content type="html"><![CDATA[<hr><h4 id="一、首先创建一个a文件"><a href="#一、首先创建一个a文件" class="headerlink" title="一、首先创建一个a文件"></a>一、首先创建一个a文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'a'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h5 id="运行一下，哈哈，输出了-a"><a href="#运行一下，哈哈，输出了-a" class="headerlink" title="运行一下，哈哈，输出了:a"></a>运行一下，哈哈，输出了:<code>a</code></h5><h4 id="二、然后创建一个b文件"><a href="#二、然后创建一个b文件" class="headerlink" title="二、然后创建一个b文件"></a>二、然后创建一个b文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="string">'b'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(b)</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h5 id="运行一下，哈哈，又输出了-b"><a href="#运行一下，哈哈，又输出了-b" class="headerlink" title="运行一下，哈哈，又输出了: b"></a>运行一下，哈哈，又输出了: <code>b</code></h5><h4 id="三、现在在b文件中引入a文件"><a href="#三、现在在b文件中引入a文件" class="headerlink" title="三、现在在b文件中引入a文件"></a>三、现在在b文件中引入a文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Qizi.a</span><br><span class="line">b = <span class="string">'b'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(b)</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h5 id="运行一下，呦呵，输出了：a和b。那么问题来了，我也没调用a的main（）函数，它咋自动执行了捏？ミﾟДﾟ彡"><a href="#运行一下，呦呵，输出了：a和b。那么问题来了，我也没调用a的main（）函数，它咋自动执行了捏？ミﾟДﾟ彡" class="headerlink" title="运行一下，呦呵，输出了：a和b。那么问题来了，我也没调用a的main（）函数，它咋自动执行了捏？ミﾟДﾟ彡"></a>运行一下，呦呵，输出了：<code>a</code>和<code>b</code>。那么问题来了，我也没调用a的main（）函数，它咋自动执行了捏？ミﾟДﾟ彡</h5><h4 id="四、现在我们把a文件的main-函数放到if什么-那么-等于-什么-39-梅因-39-判断下"><a href="#四、现在我们把a文件的main-函数放到if什么-那么-等于-什么-39-梅因-39-判断下" class="headerlink" title="四、现在我们把a文件的main()函数放到if什么 __那么__ 等于 什么&#39;__梅因__&#39;判断下"></a>四、现在我们把a文件的main()函数放到<code>if什么 __那么__ 等于 什么&#39;__梅因__&#39;</code>判断下</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'a'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="这回我们再返回去运行一下b文件。呦呵，只输出了b。舒服了。"><a href="#这回我们再返回去运行一下b文件。呦呵，只输出了b。舒服了。" class="headerlink" title="这回我们再返回去运行一下b文件。呦呵，只输出了b。舒服了。"></a>这回我们再返回去运行一下b文件。呦呵，只输出了<code>b</code>。舒服了。</h4><h4 id="五、所以，这个if什么-那么-等于-什么-39-梅因-39-可以保证脚本在以模块导入的时候，不会自动执行最外层——函数定义以外的代码。"><a href="#五、所以，这个if什么-那么-等于-什么-39-梅因-39-可以保证脚本在以模块导入的时候，不会自动执行最外层——函数定义以外的代码。" class="headerlink" title="五、所以，这个if什么 __那么__ 等于 什么&#39;__梅因__&#39;可以保证脚本在以模块导入的时候，不会自动执行最外层——函数定义以外的代码。"></a>五、所以，这个<code>if什么 __那么__ 等于 什么&#39;__梅因__&#39;</code>可以保证脚本在以模块导入的时候，不会自动执行最外层——函数定义以外的代码。</h4><hr> <center>٩( 'ω' )و get！</center><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"enable":true,"clientID":"8de4640ced2f028d2ddb","clientSecret":"568544c87515451755cba417e1492cc3fdc8cf6f","repo":"savaGitalk","owner":"printffhelloworld","admin":"printffhelloworld","distractionFreeMode":true};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h4 id=&quot;一、首先创建一个a文件&quot;&gt;&lt;a href=&quot;#一、首先创建一个a文件&quot; class=&quot;headerlink&quot; title=&quot;一、首先创建一个a文件&quot;&gt;&lt;/a&gt;一、首先创建一个a文件&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="http://yoursite.com/2020/04/19/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2020/04/19/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2020-04-19T09:27:20.000Z</published>
    <updated>2020-04-20T14:44:11.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>2020年4月9日，天气晴，心情愉悦。<br>虽然今天是周日，但外面建房子的仍然在上班。大清早开始就叮叮DuangDuang吵个不停。emmm，词穷编不下去了。反正就是本来很烦，但是我建好了我的个人博客，整个人又开心了。嗯。现在还只是再本地，待会看看怎么弄到公网上然后装个逼。真实充实而美好的一天啊。END。</p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>Nothing</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"enable":true,"clientID":"8de4640ced2f028d2ddb","clientSecret":"568544c87515451755cba417e1492cc3fdc8cf6f","repo":"savaGitalk","owner":"printffhelloworld","admin":"printffhelloworld","distractionFreeMode":true};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;p&gt;2020年4月9日，天气晴，心情愉悦。&lt;br&gt;虽然今天是周日，但外面建房子的仍然在上班。大清早开始就叮叮DuangDuang吵个不停
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
